#!/bin/bash

if [ -z "$BUILD_PATH" ]; then
    echo "Before use this script, you need set BUILD_PATH varaible in your system."
    exit 1;
fi

if [ "$#" -ne 1 ]; then
    cd $BUILD_PATH;
    cmake ..; make
fi

for arg in "$@"
    do
	cd $BUILD_PATH;
	case "$arg" in
  	  --cmake-only | -cm) cmake .. ;;
  	  --make-only | -mk) make ;;
  	  --clang-tidy | -ct) cmake -DGTEST_ONLY=ON ..; make;\
                              cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DGTEST_ONLY='' ..;\ 
                              python ../scripts/local_scripts/run-clang-tidy.py ;;
  	  --valgrind | -v) make valgrind ;;
  	  --clear | -cl) cd ..; cd build;
			 if [ $? -eq 0 ]; then
    			 	rm -rf *;
			 else
    			 	echo Your BUILD_PATH is not correct! Set this variable again;
			 fi;;

  	  --unit-test |-ut) cmake ..; make; ./bin/messenger_binary_UT ;;	
  	  --full | -f) cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..; make;\ 
		       make valgrind;\ 
		       python ../scripts/local_scripts/run-clang-tidy.py ;;
  	  --help | -h) 	echo '=== To use script go to */MessengerOnFileForLinux/build ===';
	       		echo '-cm / --cmake-only -> generate only CMake files';
	       		echo '-mk / --make-only  -> build without creating/updating CMake files';
			echo '-ct / --clang-tidy -> run clang-tidy code analysis';
			echo '-v  / --valgrind   -> run valgrind on UT';
			echo '-cl / --clear      -> clear */build directory';
			echo '-ut / --unit-test  -> build and run UT';
			echo '-f  / --full       -> generate CMake files, build binary, run valgrind on UT and run clang-tidy';;
  	  *) echo "Unknown argumnt. Run script with -h / --help flag."
	esac
    done
